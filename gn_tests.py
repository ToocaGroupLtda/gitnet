import unittest
import os
import bash as sh
from get_log import retrieve_commits
from gn_exceptions import RepositoryError, ParseError, InputError

# A unit test module for gitnet. Be careful making changes to this file. It is sensitive to its position in the
#   file system.

class TestGetLog(unittest.TestCase):

    def setUp(self):
        # Save gitnet directory.
        self.gitnet_dir = os.getcwd()
        # Go into parser testing folder. Make directory and copy in bash script.
        os.chdir(self.gitnet_dir + "/gitnet_tests/test_parser")
        sh.bash("mkdir test_repo")
        sh.bash("cp make_repo.sh ./test_repo")
        # Run the bash script with Git initialization and commit activity.
        self.test_repo_dir = self.gitnet_dir + "/gitnet_tests/test_parser/test_repo"
        os.chdir(self.test_repo_dir)
        sh.bash("bash make_repo.sh")
        # Navigate back to gitnet home folder for testing.
        os.chdir(self.gitnet_dir)

    # Tests whether get_log.py successful retrieves commits from a Git repository in "basic" mode.
    def test_retrieve_basic_commits(self):
        # Access the git logs that were generated by the script.
        f = open(self.test_repo_dir + "/basic_logs.txt")
        bash_logs = f.read()
        f.close()
        # Read in the git logs with retrieve_commits
        generated_logs = retrieve_commits(self.test_repo_dir,mode = "basic")
        self.assertEqual(generated_logs.replace("\n",""),
                         ("Mode =\nbasic\n"+bash_logs).replace("\n",""))

    # Tests whether get_log.py successful retrieves commits from a Git repository in "raw" mode.
    def test_retrieve_raw_commits(self):
        # Access the git logs that were generated by the script.
        f = open(self.test_repo_dir + "/raw_logs.txt")
        bash_logs = f.read()
        f.close()
        # Read in the git logs with retrieve_commits
        generated_logs = retrieve_commits(self.test_repo_dir,mode = "raw")
        self.assertEqual(generated_logs.replace("\n",""),
                         ("Mode =\nraw\n"+bash_logs).replace("\n",""))

    # Tests whether get_log.py successful retrieves commits from a Git repository in "stat" mode.
    def test_retrieve_stat_commits(self):
        # Access the git logs that were generated by the script.
        f = open(self.test_repo_dir + "/stat_logs.txt")
        bash_logs = f.read()
        f.close()
        # Read in the git logs with retrieve_commits
        generated_logs = retrieve_commits(self.test_repo_dir,mode = "stat")
        self.assertEqual(generated_logs.replace("\n",""),
                         ("Mode =\nstat\n"+bash_logs).replace("\n",""))

    def tearDown(self):
        os.chdir(self.gitnet_dir + "/gitnet_tests/test_parser")
        sh.bash("rm -r test_repo")
        os.chdir(self.gitnet_dir)

class RetrievalFailure(unittest.TestCase):
    def setUp(self):
        # Save gitnet directory.
        self.gitnet_dir = os.getcwd()
        # Go into parser testing folder. Make directory and copy in bash script.
        os.chdir(self.gitnet_dir + "/gitnet_tests/test_parser")
        sh.bash("mkdir test_repo")
        sh.bash("cp make_repo.sh ./test_repo")
        # Run the bash script with Git initialization and commit activity.
        self.test_repo_dir = self.gitnet_dir + "/gitnet_tests/test_parser/test_repo"
        os.chdir(self.test_repo_dir)
        sh.bash("git init")
        # Navigate back to gitnet home folder for testing.
        os.chdir(self.gitnet_dir)

    # Tests whether get_log.py raises the appropriate error when accessing an inactive Git repository.
    def test_no_commits_failure(self):
        with self.assertRaises(RepositoryError):
            retrieve_commits(self.test_repo_dir, mode = "basic")

    # Tests whether get_log.py raises the appropriate error when passed an invalid retrieval mode.
    def test_bad_mode_error(self):
        with self.assertRaises(InputError):
            retrieve_commits(self.test_repo_dir, mode="hoolagin")

    # Tests whether get_log.py raises the appropriate error when accessing a directory that's not a Git repository.
    def test_not_repo(self):
        with self.assertRaises(RepositoryError):
            retrieve_commits("/")

    def tearDown(self):
        os.chdir(self.gitnet_dir + "/gitnet_tests/test_parser")
        sh.bash("rm -r test_repo")
        os.chdir(self.gitnet_dir)

if __name__ == '__main__':
    unittest.main()
